///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file deals with MAX mesh pointers and solves related ownership issues.
 *	\file		FLX_MAXMeshPointer.h
 *	\author		Pierre Terdiman
 *	\date		April, 4, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef FLX_MAXMESHPOINTER_H
#define FLX_MAXMESHPOINTER_H

	class MAXMeshPointer
	{
		public:
		// Constructor/Destructor
							MAXMeshPointer(Object* object, TimeValue time_value=0);
							~MAXMeshPointer();

		inline_				operator	void*()			{ return (void*)(udword(mMesh));	}
		inline_	::Mesh*		operator	->()	const	{ return mMesh;						}
		inline_	::Mesh*		GetMesh()			const	{ return mMesh;						}
		inline_	Object*		GetObject()					{ return mObject;					}

		inline_	bool		OwnsTheCopy()		const	{  return mObject!=mTriObj;			}

		private:
				Object*		mObject;
				TriObject*	mTriObj;
				::Mesh*		mMesh;
	};

#endif // FLX_MAXMESHPOINTER_H
