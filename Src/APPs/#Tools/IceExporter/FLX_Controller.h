///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file contains various controller-related functions.
 *	\file		FLX_Controller.h
 *	\author		Pierre Terdiman
 *	\date		April, 4, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef FLX_CONTROLLER_H
#define FLX_CONTROLLER_H

	// Controller types
	enum MAXCtrlType
	{
		IMAX_CTRL_INTER_UNKNOW			= 0,
		IMAX_CTRL_INTER_UNDEFINED		= 1,
		IMAX_CTRL_INTER_INVALID			= 2,
		IMAX_CTRL_INTER_LINEAR_FLOAT	= 3,
		IMAX_CTRL_INTER_LINEAR_POSITION	= 4,
		IMAX_CTRL_INTER_LINEAR_ROTATION	= 5,
		IMAX_CTRL_INTER_LINEAR_SCALE	= 6,
		IMAX_CTRL_INTER_PRS				= 7,
		IMAX_CTRL_INTER_LOOKAT			= 8,
		IMAX_CTRL_INTER_HYBRID_FLOAT	= 9,
		IMAX_CTRL_INTER_HYBRID_POSITION	= 10,
		IMAX_CTRL_INTER_HYBRID_ROTATION	= 11,
		IMAX_CTRL_INTER_HYBRID_POINT3	= 12,
		IMAX_CTRL_INTER_HYBRID_SCALE	= 13,
		IMAX_CTRL_INTER_HYBRID_COLOR	= 14,
		IMAX_CTRL_INTER_TCB_FLOAT		= 15,
		IMAX_CTRL_INTER_TCB_POSITION	= 16,
		IMAX_CTRL_INTER_TCB_ROTATION	= 17,
		IMAX_CTRL_INTER_TCB_POINT3		= 18,
		IMAX_CTRL_INTER_TCB_SCALE		= 19,

		IMAX_CTRL_FORCE_DWORD			= 0x7fffffff
	};

	// PRS parameters
	enum IMAX_PRSController
	{
		IMAX_POSITION					= 0,
		IMAX_ROTATION					= 1,
		IMAX_SCALE						= 2
	};

	typedef float	(*SAMPLE_FLOAT_CALLBACK)	(udword time_value, udword user_data);
	typedef Point3	(*SAMPLE_POINT_CALLBACK)	(udword time_value, udword user_data);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if the given controller is known.
	 *	\param		cont	[in] a MAX animatable
	 *	\return		MAXCtrlType enumeration code
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	MAXCtrlType	IsKnownController(Animatable* cont);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if the given controller is a float controller.
	 *	\param		cont	[in] a MAX animatable
	 *	\return		true for float controllers
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool		IsFloatController(Animatable* cont);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if the given controller is a Point controller.
	 *	\param		cont	[in] a MAX animatable
	 *	\return		true for Point controllers
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool		IsPointController(Animatable* cont);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Gets the number of keys used by a given controller.
	 *	\param		anim	[in] a MAX animatable
	 *	\return		number of keys or 0 if the controller is invalid (or has no keys defined)
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	udword		GetNbKeys(Animatable* anim);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if a given node is keyframed.
	 *	\param		node		[in] a MAX node
	 *	\param		is_animated	[in] true if we only want to check it's "animated"
	 *	\return		true if the node is keyframed
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool		IsKeyframed(INode* node, bool is_animated=false);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if a given node is keyframed OR HAS A KEYFRAMED PARENT.
	 *	\param		node		[in] a MAX node
	 *	\param		is_animated	[in] true if we only want to check it's "animated"
	 *	\return		true if the node is keyframed
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool		HasKeyframedAncestor(INode* node, bool is_animated=false);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Checks if a given node has a visibility track.
	 *	\param		node	[in] a MAX node
	 *	\return		true if the node has a vistrack
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool		HasVisibilityTrack(INode* node);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Gets a sub-anim from a name.
	 *	\param		anim	[in] a MAX animatable
	 *	\param		name	[in] name of desired sub-anim
	 *	\return		desired MAX sub-anim, or null if not found
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Animatable*	GetSubAnim(Animatable* anim, const char* name);

	ControllerType	GetControllerType(MAXCtrlType ctrlid);
	InterpScheme	GetControllerScheme(MAXCtrlType ctrlid);
	TimeValue		GetLastKeyframeTime(Animatable* anim);

#endif // FLX_CONTROLLER_H
