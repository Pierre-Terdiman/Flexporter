///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file contains matrix conversion related code.
 *	\file		FLX_MatrixConvert.cpp
 *	\author		Pierre Terdiman
 *	\date		April, 4, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Precompiled Header
#include "Stdafx.h"

using namespace IceExporter;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Gets a uniform matrix from any MAX matrix. This code comes from the Character Studio SDK.
 *	\param		mtx		[in] a MAX matrix
 *	\return		the uniform matrix
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Matrix3 IceExporter::GetUniformMatrix(const Matrix3& originalmatrix)
{
	AffineParts	PRS;
	Matrix3		Mat;

	// Cut the original matrix to pieces
	decomp_affine(originalmatrix, &PRS);
	// Convert the PR data back into a matrix
	PRS.q.MakeMatrix(Mat);
	Mat.SetRow(3, PRS.t);
	return(Mat);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Gets a D3D matrix from any MAX matrix. Original code by Loïc Baumann.
 *	\param		mtx		[in] a MAX matrix
 *	\return		the D3D matrix
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Matrix3 IceExporter::GetD3DMatrix(Matrix3 mtx)
{
	Point3 h = mtx.GetRow(0);
	mtx.SetRow(0, Point3(h.x, h.z, h.y));
	h = mtx.GetRow(1);
	Point3 i = mtx.GetRow(2);
	mtx.SetRow(2, Point3(h.x, h.z, h.y));
	mtx.SetRow(1, Point3(i.x, i.z, i.y));
	h = mtx.GetTrans();
	mtx.SetTrans(Point3(h.x, h.z, h.y));
	return mtx;
}

void IceExporter::MAXToICE(PRS& prs, const NakedPRS& src)
{
	prs.mPos.x		= src.mPosition.x;
	prs.mPos.y		= src.mPosition.y;
	prs.mPos.z		= src.mPosition.z;
	//
	prs.mRot.p.x	= src.mRotation.x;
	prs.mRot.p.y	= src.mRotation.y;
	prs.mRot.p.z	= src.mRotation.z;
	prs.mRot.w		= src.mRotation.w;
	//
	prs.mScale.x	= src.mScale.x;
	prs.mScale.y	= src.mScale.y;
	prs.mScale.z	= src.mScale.z;
}

void IceExporter::MAXToICE(Matrix4x4& mat, const NakedPRS& src)
{
	PRS prs;
	MAXToICE(prs, src);
	mat = PR(prs);
}
