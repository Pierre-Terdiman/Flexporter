///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file contains code for Flexporter plug-ins.
 *	\file		FLX_Plug.h
 *	\author		Pierre Terdiman
 *	\date		September, 24, 2001
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef FLX_PLUG_H
#define FLX_PLUG_H

	class FLEXPORTER_API FormatDescriptor
	{
		public:
		// Constructor/Destructor
									FormatDescriptor();
									~FormatDescriptor();

		// Data access
		inline_	HINSTANCE			GetLibHandle()			const	{ return mLibHandle;		}
		inline_	const char*			GetName()				const	{ return mName;				}
		inline_	const char*			GetExtension()			const	{ return mExtension;		}
		inline_	ExportFormat*		GetPlug()				const	{ return mPlug;				}
		inline_	ExportSettings*		GetSettings()			const	{ return mSettings;			}
		inline_	Enabled*			GetEnabledSettings()	const	{ return mEnabledSettings;	}
		inline_	int					GetVersion()			const	{ return mVersion;			}

		// Last filename
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Gets the last used filename.
		 *	\param		filename	[out] last used filename
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void				GetLastSavedFilename(String& filename);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Saves the last used filename.
		 *	\param		filename	[in] last used filename
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void				SaveLastFilename(const String& filename);

		// Dynamic loading
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Loads a format plug-in.
		 *	\param		filename	[in] format's dll name
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool				LoadPlug(const char* filename);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Unloads a format plug-in.
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void				UnloadPlug();

		// Settings
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Checks we can auto-load the settings for this format.
		 *	\return		true if we can auto-load
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool				CanAutoLoad()	const;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Loads settings from the registry.
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool				LoadSettings();
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Saves settings to the registry.
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool				SaveSettings()	const;
		private:
				HINSTANCE			mLibHandle;			//!< DLL handle
				const char*			mName;				//!< Plugin name used as a registry folder
				const char*			mExtension;			//!< File extension
				ExportFormat*		mPlug;				//!< Custom export format
				ExportSettings*		mSettings;			//!< Export settings
				Enabled*			mEnabledSettings;	//!< Enabled settings
				int					mVersion;			//!< Version
	};

#endif // FLX_PLUG_H
