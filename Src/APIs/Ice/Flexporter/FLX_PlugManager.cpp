///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file contains code for the plug-ins manager.
 *	\file		FLX_PlugManager.cpp
 *	\author		Pierre Terdiman
 *	\date		January, 26, 2003
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Precompiled Header
#include "Stdafx.h"

using namespace Flexporter;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Constructor.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PluginManager::PluginManager()
{
	mInitialized		= FALSE;
	mSelectedExporter	= 0;
	mNbExporters		= 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Destructor.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PluginManager::~PluginManager()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Loads all plug-ins.
 *	\param		source_directory	[in] source directory where plugin files are located
 *	\return		number of plugins found
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
udword PluginManager::LoadPlugins(const char* source_directory)
{
	if(!mInitialized)
	{
		char Dir[1024], DllPath[1024];
		strcpy(Dir, "c:\\");
		strcpy(DllPath, "c:\\*.flx");
		if(source_directory)
		{
			strcpy((char*)Dir, source_directory);
			strcpy(DllPath, Dir);
			strcat(DllPath, "\\*.flx");
		}

		// Look for exporters
		mNbExporters = 0;

		STARTFINDFILES(DllPath);

			char* ExporterName = FILEFOUND;

			strcpy(DllPath, Dir);
			strcat(DllPath, ExporterName);

			if(mPlugs[mNbExporters].LoadPlug(DllPath))
			{
				mNbExporters++;
			}

		ENDFINDFILES;

		mInitialized = TRUE;

		// Check selected exporter is still ok
		if(mSelectedExporter>=mNbExporters)	mSelectedExporter = 0;

		// Try to get back most recently used exporter
		String LastExporter;
		Load("Flexporter", "LastExporter", "ExporterName", LastExporter);
		if(LastExporter.IsValid())
		{
			for(udword i=0;i<mNbExporters;i++)
			{
				if(strcmp(LastExporter, mPlugs[i].GetName())==0)
				{
					mSelectedExporter = i;
					break;
				}
			}
		}
	}
	return mNbExporters;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Unloads all plugins.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PluginManager::UnloadPlugins()
{
	for(udword i=0;i<mNbExporters;i++)
	{
		mPlugs[i].UnloadPlug();
	}

//	mSelectedExporter	= 0;	### don't reset this one!
	mNbExporters		= 0;
	mInitialized		= FALSE;
}
