///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	FLEXPORTER - a flexible exporter
 *	Copyright (C) 2000-2004 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Flexporter.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	This file contains the shape-related exported structures.
 *	\file		FLX_AddShape.h
 *	\author		Pierre Terdiman
 *	\date		April, 4, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef FLX_ADDSHAPE_H
#define FLX_ADDSHAPE_H

	enum ShapeType
	{
		FLX_SHAP_UNDEFINED		= 0,
		FLX_SHAP_SPLINE			= 1,
		FLX_SHAP_NGON			= 2,
		FLX_SHAP_DONUT			= 3,
		FLX_SHAP_STAR			= 4,
		FLX_SHAP_RECTANGLE		= 5,
		FLX_SHAP_HELIX			= 6,
		FLX_SHAP_ELLIPSE		= 7,
		FLX_SHAP_CIRCLE			= 8,
		FLX_SHAP_TEXT			= 9,
		FLX_SHAP_ARC			= 10,

		FLX_SHAP_FORCE_DWORD	= 0x7fffffff
	};

	//! The shape information class.
	class FLEXPORTER_API ShapeDescriptor : public ObjectDescriptor
	{
		public:
		// Constructor / Destructor
									ShapeDescriptor();
		virtual						~ShapeDescriptor();

				ShapeType			mType;			//!< Shape's type
		// Parameters
				udword				mNbLines;		//!< Number of polylines for the shape
				udword*				mNbVerts;		//!< Number of vertices in each line
				bool*				mClosed;		//!< Is each line a closed line?
				NakedPoint*			mVerts;			//!< List of vertices
		// Material information
				sdword				mMatID;			//!< Material ID for the shape
		// Instance information
				ShapeDescriptor*	mMasterShape;	//!< Master object [Flexporter 1.15]
	};

#endif // FLX_ADDSHAPE_H
